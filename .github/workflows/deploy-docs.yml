name: Deploy Documentation

on:
  push:
    branches:
      - main
      - 'v*'
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    
    environment:
      name: github-pages
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Get all version branches
        id: get-versions
        run: |
          echo "VERSIONS<<EOF" >> $GITHUB_ENV
          git branch -r | grep 'origin/v' | sed 's/origin\///' >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "::set-output name=current_branch::$(git branch --show-current)"

      - name: Build main branch (latest)
        run: |
          mkdir -p _site/latest
          # Create a temporary config file with updated baseurl
          echo "Creating temporary config file for latest version..."
          cp "./_config.yml" "./temp_config_latest.yml"
          echo "baseurl: \"/documentation/latest\"" >> "./temp_config_latest.yml"
          
          # Build with the temporary config
          bundle exec jekyll build --config "./temp_config_latest.yml" -d _site/latest
          
          # Note: We're not copying to root as per requirement

      - name: Build version branches
        run: |
          for branch in $VERSIONS; do
            echo "Building documentation for $branch"
            git checkout $branch
            mkdir -p _site/$branch
            
            # Create a temporary config file with updated baseurl
            echo "Creating temporary config file for $branch version..."
            cp "./_config.yml" "./temp_config_version_$branch.yml"
            echo "baseurl: \"/documentation/$branch\"" >> "./temp_config_version_$branch.yml"
            
            # Build with the temporary config
            bundle exec jekyll build --config "./temp_config_version_$branch.yml" -d _site/$branch
            
            # Create a .nojekyll file to prevent GitHub Pages from processing the site
            touch _site/$branch/.nojekyll
          done
          
          # Create a .nojekyll file in the root to prevent GitHub Pages from processing the site
          touch _site/.nojekyll
          
          # Create a redirect from root to /latest
          echo '<meta http-equiv="refresh" content="0; url=latest/">' > _site/index.html
          
          git checkout ${{ steps.get-versions.outputs.current_branch }}

      - name: Generate version selector data
        run: |
          echo "Creating version selector data"
          echo '{"versions":["latest"' > _site/versions.json
          for branch in $VERSIONS; do
            echo ',"'$branch'"' >> _site/versions.json
          done
          echo ']}' >> _site/versions.json
          
          # Copy versions.json to each version directory for redundancy
          cp _site/versions.json _site/latest/versions.json
          for branch in $VERSIONS; do
            cp _site/versions.json _site/$branch/versions.json
          done

      - name: Clean up temporary config files
        run: |
          echo "Cleaning up temporary config files..."
          rm -f ./temp_config_*.yml
          
      - name: Ensure version selector files are in each version
        run: |
          # Copy version selector files to each version directory
          for dir in _site/latest _site/v*; do
            mkdir -p $dir/assets/js
            mkdir -p $dir/assets/css
            cp assets/js/version-selector.js $dir/assets/js/
            cp assets/css/version-selector.css $dir/assets/css/
          done
          
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4